
This is Rick's partial understanding of how cheetah works as of 
9/19/2011... don't trust what you find here.

Cheetah keywords to be specified in ini files:

General notes: 
- Keywords are NOT case sensitive.
- If the same keyword is set twice, only the last occurence will be 
  used by cheetah.  No notification will be given if this is the 
  case, SO CAREFULLY CHECK YOUR INI FILES!!
- Cheetah will now exit if unrecognized keywords are found (a useful
  note will be printed to the terminal).
- By default, cheetah no longer reads both cspad-cryst.ini and 
  cheetah.ini files within the directory where cheetah is running.  
- If you want to know all of the keywords and their values used in a 
  particular run of cheetah (including both user-set and default 
  values), have a look in the log.txt file ouput by cheetah.  This 
  will reflect keyword values which have been changed as a consequence
  of other keyword selections.


keyword (default value)
==========================
Description of this keyword


detectorType (cspad)
===========================
Recognized options are:
- "cspad"
- "pnccd"


detectorName (CxiDs1)
============================
Recognized options for cspad are:
- "CxiDs1": cspad near detector
- "CxiDs2": ??
- "CxiDsd": cspad far detector
Recognized options for pnccd are:
- ??

startAtFrame (0)
============================
Skip all frames in the xtc file prior to this one.

- What happens when there are multiple xtc files? Does cheetah 
  concatenate the events in all of the xtc files, or does cheetah start
  at this frame in each xtc file? I guess the myana.cc and main.cc code
  dictates this behavior presently.


stopAtFrame (0)
=============================
Skip all frames in the xtc file after this one. Setting to 0 
means to ignore this setting.

- See question about startatframe above, regarding the case of 
  multiple xtc files.
- Note that, currently, the program does not end when this frame is 
  reached; it just keeps running until the end of the xtc file(s), 
  doing nothing other than printing a message indicating that it is 
  skipping to the end of the file.  Maybe this can be fixed, but
  probably the change needs to happen in the myana.cc or main.cc 
  code.


nThreads (16)
=================================
Run this many worker threads in parallel (one worker thread per 
LCLS event).


useHelperThreads (0)
================================
This doesn't appear to do anything at the moment??


ioSpeedTest (0)
================================
Run through events in xtc file, reading in all data, but do no data 
processing (don't spawn worker threads).


threadPurge (10000)
================================
Periodically pause and let all threads finish.  On cfelsgi we seem to 
get mutex-lockup on some threads if we don't do this.


geometry (geometry/cspad_pixelmap.h5)
==================================
Path to an hdf5 file specifying the real-space coordinates of each 
pixel.  The hdf5 data fields are /x /y /z. The x coordinate cooresponds 
to data fast scan coordinates.  Units are meters.
- Does any part of the cheetah code need to know where pixels
  are located, other than peak density calculation??
- Is the /z data currently being used by cheetah?
- See the keyword pixelSize-- it is important that this is consistent
  with the units in the geometry!


darkcal (darkcal.h5)
====================================
Path to an input hdf5 file containing dark current.  Cheetah can
create a darkcal from a dark run; see the generateDarkcal keyword.  
The hdf5 data field is "/data/data".  Units are ADU.  Darkcals 
should NOT be gain corrected.Make sure the detector gain settings 
of the darkcal match that of the run.


gaincal (gaincal.h5)
====================================
Path to an input hdf5 file containing the gainmap.  The raw data will 
be multiplied by this map.  The hdf5 data field is "/data/data".


peakMask (peakmask.h5)
=====================================
Path to an input hdf5 file indicating where to search for
peaks.  Specifically, this operation multiplies the image data 
by this map prior to the usual peak search.  The hdf5 data field 
is "/data/data".


badPixelmap (badpixels.h5)
======================================
Path to input hdf5 file indicating bad pixel.  Specifically, this
operation multiplies the image data by this map before carying on with
analsysis operations.  Essentially, this has the same effect as a 
gainmap.  The hdf5 data field is "/data/data"


subtractcmModule (0)
========================================
??


cmModule (0)
========================================
Evidently, this does exactly the same thing as the keyword 
subtractcmmodule.  Remove one of them?  Else, people might have
both in their ini files.


subtractUnbondedPixels (0)
==============================================
One of three possible types of common mode subtraction procedures.
What exactly does this do?  Unbonded pixels record only readout
electronic noise?


wireMaskFile (wiremask.h5)
==========================================
Path to input hdf5 file for doing what?  Cast shadows, and use the
counts behind shadows to determine common mode noise?


subtractBehindWires (0)
=========================================
One of three possible types of common mode subtraction procedures.
What exactly does this do?


useGaincal (0)
================================
Toggle gain corrections provided in the gaincal file. Data will 
be multiplied (not divided) by the gainmap.


invertGain (0)
========================================
At the time of reading the gainmap, set the gainmap to its reciprocal
value, which fixes possible divide by zero.  In this way, pixels with 
value zero will specify a dead pixel.


generateDarkcal (0)
=========================================
Take the average of all patterns, and output a "darkcal" hdf5 file named 
rXXXX-darkcal.h5 in the end.  Basically, trick cheetah into thinking
every frame is a "hit".  The darkcal is the average not he sum, unlike
the usual "powder" patterns which are generated.

- Note that if you set generatedarkcal=1, the following keywords will 
be modified:
cmModule = 0;
cmSubtractUnbondedPixels = 0;
subtractBg = 0;
useDarkcalSubtraction = 0;
useGaincal=0;
useAutoHotpixel = 0;
useSubtractPersistentBackground = 0;
hitfinder = 0;
savehits = 0;
hdf5dump = 0;
saveRaw = 0;
saveDetectorRaw = 1;
powderSumHits = 0;
powderSumBlanks = 0;
powderthresh = -30000;
startFrames = 0;
saveDetectorCorrectedOnly = 1;


generateGaincal (0)
===============================================
Sum all patterns (regardless of whether or not each frame is a "hit"), 
form an average, then divide this average by the median value of the 
image.  The median value is therefore gain = 1.  The gainmap will
be saved as "rXXXX-gaincal.h5".  At the moment, the gainmap is set to 
zero where it is outside of the bounds 0.1 and 10.

- The folliwing keywords are influenced by setting generategaincal=1:
cmModule = 0;
cmSubtractUnbondedPixels = 0;
subtractBg = 0;
useDarkcalSubtraction = 1;
useAutoHotpixel = 0;
useSubtractPersistentBackground = 0;
useGaincal=0;
hitfinder = 0;
savehits = 0;
hdf5dump = 0;
saveRaw = 0;
saveDetectorRaw = 1;
powderSumHits = 0;
powderSumBlanks = 0;
powderthresh = -30000;
startFrames = 0;
saveDetectorCorrectedOnly = 1;


subtractBg (0)
=======================================
This keyword influences nothing whatsoever.  It has been removed
from the list of recognized ini keywords.


useBadPixelmap (0)
================================================
Toggle the use of the bad pixel map.


useDarkcalSubtraction (1)
================================================
Toggle the use of the darkcal map.


hitfinder (0)
==============================================
Specify the hitfinder algorithm.  Various flavours of hitfinder:
   1 - Number of pixels above ADC threshold
   2 - Total intensity above ADC threshold
   3 - Count Bragg peaks
   4 - Use TOF
Note that the choice of hitfinder influences what is reported in the 
log files.

First, do these steps (regardless of the hitfinder choice):
  Build a buffer, which is a replica of the corrected data.  Values
  in the buffer array will be set to zero as those pixels are analyzed
  and rejected.  If hitfinderUsePeakmask != 0, then multiply the buffer 
  by this array before moving on.

Now, depending on the algorithm, do these steps:

  Algorithm 1:

    1) Count the pixels within the buffer that are above the 
       (user-defined) hitfinderadc value.
    2) Also, sum the values of the pixels that meet the criteria of
       step 1.
    3) If the number of pixels is greater than the value of 
       (user-defined) hitfindernat, count this frame as a hit.
    4) Report the number of pixels in the log files as npeaks and as
       nPixels.
    5) Report the total counts (intensity) as peakTotal

  Algorithm 2:

    Same as algorithm 1, except that the criteria for a hit is now
    that the *intensity* is greater than hitfindernat, rather than
    the pixel count.

  Algorithm 3:

    Briefly, this is what happens:
    1) Scan the buffer, module-by-module, searching for "blobs" of 
       connected pixels which all meet the criteria of being above the 
       threshold defined by the keyword hitfinderADC.  A pixel can be
       "connected" to any of its eight nearest neighbors.  If its 
       "connected" neighbor is "connected" to another pixel, then all 
       three are mutually "connected" to each other.
    2) If a blob contains more than hitfinderMinPixCount connected
       pixels, and less than hitfinderMaxPixCount pixels, it is counted
       as a peak.
    3) The center of mass and integrated intensity is calculated for 
       the blob (this is the peak position and integrated intensity).
    4) If there are more than hitfinderNpeaks peaks, and less than 
       hitfinderNpeaksMax, then count this as a hit.

    Some important keywords:
    - hitfinderNAT
    - hitfinderADC
    - hitfinderMinPixCount
    - hitfinderMaxPixCount
    - hitfinderNPeaks
    - hitfinderNPeaksMax
    - hitfinderCheckMinGradient: Before considering a peak candidate,
        check that the intensity gradient is above this threshold.  
        Here, the "gradient" is the mean square derivative of the 
        "above/below" and "upper/lower" pairs of pixels connnected
        to the pixel of interest.
    - hitfinderMinGradient: Threshold for the above keyword.
    - hitfinderCheckPeakSeparation: After locating peaks, throw out
        all the peak pairs that are too close together.
    - hitfinderMaxPeakSeparation: Threshold for the above keyword.

    This algorithm also calculates a quantity called "peak density"?
    What's being reported in the log files?

  Algorithm 4:

    Use time-of-flight data... details later...

    
saveHits (0)
===========================================
Save the hits to individual hdf5 files.  Exactly what will be saved is 
determined by the keywords saveRaw, saveAssembled, savePeakInfo 
saveDetectorCorrectedOnly, saveDetectorRaw, and possibly more...


savePeakInfo (1)
=========================================
Save the peak center of mass (two coordinates), intensity, and number 
of pixels to the hdf5 and log files.  These values are specified in
the "assembled" and "raw" coordinate systems.  Look to the hdf5 fields
/processing/hitfinding/peakinfo* for this information. More details
later.


saveRaw (0)
==========================================
Save corrected data in the hdf5 files, without interpolation.  The 
hdf5 data field is /data/rawdata.  Note that the word "raw" does not 
mean uncorrected (!) as one might think; it just means that it has 
not been interpolated onto a larger (zero-padded) array based on 
the geometry file (this one is the "assembled" data set).


saveAssembled (1)
=====================================
Save the data which has been interpolated into a zero-padded array, 
based on the geometry file.  Note that this will take up more space
on disk.  Also, note that geometry is updated sometimes, and you 
will need to re-run all of your hitfinding if you intend to store the 
data only in assembled form.  The hdf5 field is /data/assembleddata. 
If present, it will be symbolically linked to the field /data/data.


saveDetectorCorrectedOnly (0)
======================================
If set to non-zero value, save the data which has only the following 
operations done to it (in this order):

1) Subtract darkcal
2) Subtract common mode offsets
3) Apply gain correction
4) Multiply by bad pixel mask

If set to zero, then you get these additional corrections (in this 
order):

5) Subtract running (persistent) background
6) Subtract local background
7) Zero out hot pixels
8) Multiply by bad pixel mask (again)

If the keyword saveDetectorRaw is set, then none of the above 
corrections will be applied (therefore, this keyword has no effect).


saveDetectorRaw (0)
===========================================
As the name suggests, save the intensity values with no corrections
applied, even though the corrections were done prior to hitfinding. 
This keyword trumps the keyword saveDetectorCorrectedOnly.  Note that 
this keyword may be confused with saveRaw, which has to do with the 
question of padding the array and interpolation, not data processing.


hdf5dump (0)
=========================================
Write every nth frame to an hdf5 file, regardless of whether it was 
found to be a hit.


saveInterval (1000)
============================================
Periodically save running sums and update the log file at this 
interval.


useAutoHotpixel (1)
================================================
Identify and remove hot pixels.  Hot pixels are identified by 
searching for pixels with intensities consitently above the 
threshold set by the keyword hotpixADC.  In this case, "consistently" 
means that a certain fraction (user-set keyword hotpixFreq) of 
a certain number of buffered frames (number of frames set by the 
keyword hotpixMemory) are above threshold.  The hot pixel map is 
updated every hotpixMemory frames.

Hot pixels within the corrected data will be set to zero.  

Note that the search for hot pixels is performed on the corrected
data (probably it should be performed on raw data instead?), so 
if you decide to change the corrections (e.g. darkcal, 
gainmap), the resulting hot pixel maps may differ.


useSelfDarkcal (0)
==============================================
This keyword setting will do exactly what 
useSubtractPersistentBackground does.  It has been removed.


useSubtractPersistentBackground (0)
==============================================
Subtract the pixel-by-pixel median background calculated from the 
previous N frames (N set by the keyword bgRecalc, but apparently
it cannot exceed 50 frames).


useLocalBackgroundSubtraction (0)
===============================================
Prior to peak searching, transform the image by subtracting the 
median value of nearby pixels.  The median is calculated from a 
box surrounding each pixel.  The size of the box is equal to 
localBackgroundRadius*2 + 1 
Bad pixels and detector edge effects are not accounted for
(i.e., if most nearby pixels are bad, the local median will be
equal to zero).


localBackgroundRadius (3)
===========================================
See keyword useLocalBackgroundSubtraction.


tofName (CxiSc1)
===========================================
Is this relevant to our pump laser diode trace?


tofName (CxiSc1)
============================================
?

tofChannel (1)
===========================================
?


hitfinderUseTof (0)
============================================
Does choosing hitfinding algorithm 4 accomplish the same thing?


hitfinderTofMinSample (0)
==============================================
?


hitfinderTofMaxSample (1000)
=============================================
?

hitfinderTofThresh=1283604304
===========================================
?


cmFloor (0.100000)
==========================================
Use lowest x% of values as the offset to subtract (typically lowest 2%)


pixelSize=0.000110
==========================================
Size of pixels in meters.


debuglevel (2)
============================================
?


hotpixFreq (0.900000)
==========================================
See keyword useAutoHotPixel.


hotpixADC (1000)
==========================================
See keyword useAutoHotPixel.


hotpixMemory (50)
============================================
See keyword useAutoHotPixel.


powderthresh (-20000)
==========================================
?


powderSumHits (1)
==========================================
Record and save the summed (not averaged) intensities from
frames determined to be hits.  Will be saved as the file
named powderSumHits.h5.  The hdf5 data field is /data/data.


powderSumBlanks (1)
==========================================
Record and save the summed (not averaged) intensities from
frames determined to be non-hits.  Will be saved as the file
named powderSumBlanks.h5.  The hdf5 data field is /data/data.



hitfinderADC (100)
==========================================
See the keyword hitfinder.


hitfinderNAT (100)
=========================================
See the keyword hitfinder.


hitfindertit (1283604304)
========================================
See the keyword hitfinder.  Is it TAT or TIT?


hitfinderCluster (0)
========================================
This does nothing at the moment.


hitfinderNPeaks (50)
==========================================
See the keyword hitfinder.


hitfinderNPeaksMax (100000)
========================================
See the keyword hitfinder.


hitfinderAlgorithm (3)
=========================================
See the keyword hitfinder.


hitfinderMinPixCount (3)
=========================================
See the keyword hitfinder.


hitfinderMaxPixCount (20)
========================================
See the keyword hitfinder.


hitfinderUsePeakMask (0)
========================================
See the keyword hitfinder.


selfDarkMemory (50)
========================================
This does nothing.  Replaced by useSubtractPersistentBackground?


bgMemory (50)
==========================================
See keyword useSubtractPersistentBackground.


bgRecalc (50)
===========================================
Strange, this *almost* does the same thing as bgMemory, but
if bgRecalc is less than the default value of bgMemory, that 
default value will be used?


bgMedian (0.5)
==========================================
Rather than using the usual median value for background, you
can optionally choose any arbitrary K-th smallest element 
equal to bgMedian*bgMemory.  Neat!


bgIncludeHits (0)
==========================================
Include hits in the background running buffer.


bgNoBeamReset (0)
===========================================
This does nothing at the moment.


bgFiducialGlitchReset (0)
===========================================
This does nothing at the moment.


scaleBackground (0)
============================================
Haven't made sense of this bit of code.  Scale the running 
background prior to subracting from current frame.  Scale 
factor looks a bit like a normalized correlation between the 
two (ignoring values above hitfinderADC), but that's 
definitely not what it is...


scaleDarkcal (0)
==========================================
This does exactly the same thing as scaleBackground.  Keyword
has been removed.


startFrames (0)
============================================
Seems that this is largely dicated by keywords like bgMemory.




Cheetah output files
==============================================
rXXXX-sumBlanksRaw.h5: as the name suggest, this is simply
the sumation of blank frames (non-hits)

rXXXX-sumBlanksRawSquared.h5:  As the name suggests... 

rXXXX-sumBlanksRawSigma.h5: NOT AS THE NAME SUGGESTS; this 
one is divided by the number of frames.

Same goes for rXXXX-sumHitsRaw and so on...


There is a symbolic link called /data/data, but what it links to 
depends on parameters in the ini file.


map log files to variables in the code:
framefp:
FrameNumber       threadInfo->threadNum
UnixTime          threadInfo->seconds
EventName         threadInfo->eventname
npeaks            threadInfo->nPeaks
nPixels           threadInfo->peakNpix
totalIntensity    threadInfo->peakTotal
peakResolution    threadInfo->peakResolution
peakDensity       threadInfo->peakDensity
 


cleanedfp:
#                 global->runNumber
Filename          info->eventname
npeaks            info->nPeaks
nPixels           info->peakNpix
totalIntensity    info->peakTotal
peakResolution    info->peakResolution
peakDensity       info->peakDensity


